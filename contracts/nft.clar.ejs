(impl-trait 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9.nft-trait.nft-trait)

(define-constant contract-owner tx-sender)
(define-constant err-owner-only (err u100))
(define-constant err-not-token-owner (err u101))
(define-constant airdrop (list <%= accounts.map((address) => `'${address}`).join(" ") %>))
(define-constant airdrop2 (list <%= accounts2.map((address) => `'${address}`).join(" ") %>))

(define-non-fungible-token stacksies principal)

(define-data-var last-token-id uint u0)

(define-read-only (get-last-token-id)
	(ok (var-get last-token-id))
)

(define-read-only (get-token-uri (token-id uint))
	(ok none)
)

(define-read-only (get-owner (token-id uint))
	(ok (nft-get-owner? stacksies tx-sender))
)

(define-public (transfer (token-id uint) (sender principal) (recipient principal))
	(begin
		(asserts! (is-eq tx-sender sender) err-not-token-owner)
		(nft-transfer? stacksies sender sender recipient)
	)
)

(define-public (mint (recipient principal))
	(let
		()
		(asserts! (is-eq tx-sender contract-owner) err-owner-only)
		(try! (nft-mint? stacksies recipient recipient))
		(ok true)
	)
)

(define-private (private-mint (id principal) (result (response bool uint)))
  (begin
		(try! (nft-mint? stacksies id id))
		(ok true)))

(define-public (multi-mint)
  (begin
    (try! (fold private-mint airdrop (ok true)))
    (fold private-mint airdrop2 (ok true))))